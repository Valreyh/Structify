package main

import (
	"flag"
	"fmt"
	"io"
	"os"

	"github.com/valreyh/structify/internal/converter/json2go"
)

func main() {
	inputFile := flag.String("i", "", "Input JSON file (uses stdin if omitted)")
	outputFile := flag.String("o", "", "Output Go file (uses stdout if omitted)")
	structName := flag.String("name", "AutoGenerated", "Name of the generated Go struct")
	flag.Parse()

	var input []byte
	var err error

	if *inputFile != "" {
		input, err = os.ReadFile(*inputFile)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error reading file %s: %v\n", *inputFile, err)
			os.Exit(1)
		}
	} else {
		input, err = io.ReadAll(os.Stdin)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error reading stdin: %v\n", err)
			os.Exit(1)
		}
	}

	if len(input) == 0 {
		fmt.Fprintln(os.Stderr, "Error: No JSON input provided.")
		fmt.Fprintln(os.Stderr, "Use a file with -i or pipe JSON to this tool.")
		flag.Usage()
		os.Exit(1)
	}

	goCode, err := json2go.Convert(input, *structName)
	if err != nil {
		fmt.Fprintf(os.Stderr, "JSON conversion error: %v\n", err)
		os.Exit(1)
	}

	if *outputFile != "" {
		err = os.WriteFile(*outputFile, []byte(goCode), 0644)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error writing to file %s: %v\n", *outputFile, err)
			os.Exit(1)
		}
		fmt.Printf("Success! Go struct generated in: %s\n", *outputFile)
	} else {
		fmt.Print(goCode)
	}
}
